[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends HBoxContainer

class BuildPathJob extends Job:
	var resource
	var urls = []
	func _init(requester, callback, resource).(requester, callback):
		self.resource = resource
		
	func _load():
		var limit_minzoom = 6
		var limit_maxzoom = 6 #resource.maxzoom
		for z in range(max(limit_minzoom, resource.minzoom), min(limit_maxzoom, resource.maxzoom)+1):
			for x in range(0, pow(2, z)):
				for y in range(0, pow(2, z)):
					var url: String = resource.url.format({
						'x': x,
						'y': y,
						'z': z
					})
					urls.push_back({
						'url': Util.from_url(url),
						'x': x,
						'y': y,
						'z': z
					})
		return []

var resource: MvtLayerTiles

func _ready():
	build_paths()
	rebuild()
	#start_download()

func rebuild():
	$Name.text = resource.id
	$Count.text = '%s / %s' % [count_finished, count_total]
	$Count2.text = '%s workers' % active_queue

var count_finished := 0
var count_total := 0
var urls := []
var max_queue := 256
var active_queue := 0
func build_paths():
	$Download.disabled = true
	count_finished = 0
	count_total = 0
	urls = []
	Worker.post_job(BuildPathJob.new(self, '_paths_built', resource))

func _paths_built(job: BuildPathJob):
	$Download.disabled = false
	count_total = job.urls.size()
	urls = job.urls
	rebuild()


func start_download():
	downloading = true
	$Download.disabled = true
	#Worker.post_job(LayerTileRequestJob.new(self, 'completed_download', resource))
	#var result = RequestJob.request(State.host, State.port, '/public.mathymetry.json')
	#Worker.post_job(LayerIndexRequestJob.new(self, 'completed_download', resource.id + '.json'))

var downloading := false
func post_download():
	if count_finished >= count_total:
		downloading = false
		$Download.disabled = false
		return
	var u = urls.pop_front()
	if !u:
		#Log.warning('No more URLs to process... odd?')
		return
	active_queue += 1
	#var response = LayerTileRequestJob.request(u.host, str(u.port), u.path)
	#print(u)
	Worker.post_job(LayerTileRequestJob.new(self, 'completed_download', resource, u.url, u.x, u.y, u.z))

func _process(delta: float):
	if downloading and active_queue < max_queue:
		post_download()

func completed_download(request: LayerTileRequestJob):
	count_finished += 1
	active_queue -= 1
	#print(request.url)
	# NOTE(sam): good place to print above
	rebuild()
	#resource.tiles = request.response 


#func import(name: String, pbf: String, x: int, y: int, z: int):
#	var layer: MvtLayer = layers[name]
#
#	#Log.verbose('Importing %s: %s' % [name, pbf])
#	var location = \"%s/%s/%s/%s\" % [layer.project, layer.table, 'resources', z]
#	var location2 = \"%s/%s\" % [layer.project, layer.table]
#	var directory: Directory = Directory.new()
#	directory.make_dir_recursive(location)
#	var data = MvtTile.new()
#	data.layer = layer
#	data.position.x = x
#	data.position.y = y
#	data.zoom = z
#	var file = File.new()
#	if file.open(pbf, File.READ) != OK:
#		Log.warning('failed to open %s' % pbf)
#
#		ResourceSaver.save(location + \"/%s-%s.tres\" % [x, y], data)
#	else:
#		var buffer = file.get_buffer(file.get_len())
#		var mvt = preload(\"res://addons/mvt/MvtTile.cs\").new()
#		geometry[name] = []
#		var tile = mvt.import(self, buffer, name)
#		file.close()
#		data.geometry = geometry[name]
#		ResourceSaver.save(location + \"/%s-%s.tres\" % [x, y], data)
#		#ResourceSaver.save(location2 + \"/layer.tres\", layer)

var geometry := {}
func geometry_add(geom, name: String):
	geometry[name].push_back(geom)
"

[sub_resource type="GDScript" id=2]
script/source = "extends Button

func _pressed():
	#var node: Node = get_parent()
	#var layer: MvtLayer = node.get('resource')
	get_parent().start_download()
	disabled = true
	
"

[node name="Tile" type="HBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Control" type="Control" parent="."]
margin_bottom = 600.0

[node name="Download" type="Button" parent="."]
margin_left = 4.0
margin_right = 45.0
margin_bottom = 600.0
text = "Start"
script = SubResource( 2 )

[node name="Name" type="Label" parent="."]
margin_left = 49.0
margin_top = 293.0
margin_right = 49.0
margin_bottom = 307.0

[node name="Count" type="Label" parent="."]
margin_left = 53.0
margin_top = 293.0
margin_right = 536.0
margin_bottom = 307.0
size_flags_horizontal = 3

[node name="Count2" type="Label" parent="."]
margin_left = 540.0
margin_top = 293.0
margin_right = 1024.0
margin_bottom = 307.0
size_flags_horizontal = 3
